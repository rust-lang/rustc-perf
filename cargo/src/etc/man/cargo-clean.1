.TH "CARGO\-CLEAN" "1" "May 2016" "The Rust package manager" "Cargo Manual"
.hy
.SH NAME
.PP
cargo\-clean \- Remove generated artifacts
.SH SYNOPSIS
.PP
\f[I]cargo clean\f[] [OPTIONS]
.SH DESCRIPTION
.PP
Remove artifacts that cargo has generated in the past.
.PP
If the \f[B]\-\-package\f[] argument is given, then \f[I]SPEC\f[] is a
package id specification which indicates which package should be built.
If it is not given, then the current package is built.
For more information on \f[I]SPEC\f[] and its format, see the "cargo
help pkgid" command.
.SH OPTIONS
.TP
.B \-h, \-\-help
Print this message.
.RS
.RE
.TP
.B \-p \f[I]SPEC\f[], \-\-package \f[I]SPEC ...\f[]
Package to clean artifacts for.
.RS
.RE
.TP
.B \-\-manifest\-path PATH
Path to the manifest to the package to clean.
.RS
.RE
.TP
.B \-\-target TRIPLE
Target triple to clean output for (default all).
.RS
.RE
.TP
.B \-\-release
Whether or not to clean release artifacts.
.RS
.RE
.TP
.B \-v, \-\-verbose
Use verbose output.
.RS
.RE
.TP
.B \-q, \-\-quiet
No output printed to stdout.
.RS
.RE
.TP
.B \-\-color \f[I]WHEN\f[]
Coloring: auto, always, never.
.RS
.RE
.SH EXAMPLES
.PP
Remove local package generated artifacts
.IP
.nf
\f[C]
$\ cargo\ clean
\f[]
.fi
.PP
Clean release artifacts
.IP
.nf
\f[C]
$\ cargo\ clean\ \-\-release
\f[]
.fi
.SH SEE ALSO
.PP
cargo(1), cargo\-build(1)
.SH COPYRIGHT
.PP
This work is dual\-licensed under Apache 2.0 and MIT terms.
See \f[I]COPYRIGHT\f[] file in the cargo source distribution.
